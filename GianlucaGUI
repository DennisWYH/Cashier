import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;

import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.TreeMap;


public class GianlucaGUI extends JFrame implements Observer {
	
	private static Map<String,List<String>> dic = new TreeMap<String,List<String>>();
	private Orders model;
	private static JTextField  customerName = new JTextField();
	private static JTextField productName = new JTextField();
	private static JTextField productPrice = new JTextField();
	private static JTextField amount = new JTextField();
	private static JPanel panel2;
	private static JFrame frame;
	private static final long serialVersionUID = 1L;
	private GianlucaActionHandler listener;
	private NameLinkListener listener2;
	private CancelListener listener3;
	private BufferedImage buttonIcon;
	
	public GianlucaGUI(Orders model) {
		this.model = model;
		this.model.addObserver(this);
		
		listener = new GianlucaActionHandler(customerName, productName, productPrice, amount);
		listener2 = new NameLinkListener(this.model);
		listener3 = new CancelListener(this.model);
		JPanel panel1 = new JPanel();
		GridLayout panel1Grid = new GridLayout(0, 2);
		panel1.setName("New Order");
		Border blackline = BorderFactory.createLineBorder(Color.black);
		panel1.setBorder(BorderFactory.createTitledBorder(blackline,"Data input area"));
		panel1.setLayout(panel1Grid);
		panel1.add(new JLabel("Customer Name"));
		panel1.add(customerName);
		panel1.add(new JLabel("Product Name"));
		panel1.add(productName);
		panel1.add(new JLabel("Product Price"));
		panel1.add(productPrice);
		panel1.add(new JLabel("Amount"));
		panel1.add(amount);
	
		JButton submit = new JButton("Submit");
		submit.setActionCommand("Submit");
		
		submit.addActionListener(listener);
		panel1.add(submit);
		
		panel2 = new JPanel();
		GridLayout panel2Grid = new GridLayout(0, 2);
		panel2.setLayout(panel2Grid);
		
		frame = new JFrame("Gianluca Cashier");
		
		GridLayout frameGrid = new GridLayout(0,2);
		frame.setLayout(frameGrid);
		frame.add(panel1);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(700, 300);
		frame.setVisible(true);
		frame.setLocationRelativeTo(null);
	}
	protected ImageIcon createImageIcon(String path, String description) {
		java.net.URL imgURL = getClass().getResource(path);
		if (imgURL != null) {
			return new ImageIcon(imgURL, description);
		} 
		else {
			System.err.println("Couldn't find file: " + path);
			return null;
		}
}

		
	/**
	 * Show the customer name on panel according to model's content.
	 * Update the frame each time when adding new button on panel
	 */
	@Override
	public void update(Observable o, Object arg) {
		dic = model.getData();
		Iterator<String> keyIter = dic.keySet().iterator();
		panel2.removeAll();
		
		Border blackline = BorderFactory.createLineBorder(Color.black);
		panel2.setBorder(BorderFactory.createTitledBorder(blackline,"Customer List"));
		while(keyIter.hasNext()){
			String userName = keyIter.next();
			JButton nameButton = new JButton(userName);
			nameButton.addActionListener(listener2);
			nameButton.setActionCommand(userName);
			try {
				buttonIcon = ImageIO.read(new File("/Users/marve/Documents/workspace/Cachier/src/image/check2.png"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			JButton cancel = new JButton(new ImageIcon(buttonIcon));

			cancel.setActionCommand(userName);
			cancel.addActionListener(listener3);
			panel2.add(nameButton);
			panel2.add(cancel);
		}
		frame.add(panel2);
		frame.getContentPane().validate();
		frame.getContentPane().repaint();
	}

}
